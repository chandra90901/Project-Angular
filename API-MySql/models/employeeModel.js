const { db } = require("../db");

exports.createEmployee = async (employeeData) => {
    const {
        Title,
        EmployeeName,
        EmployeeStatusId,
        ReportingTo,
        GenderId,
        MaritalStatusId,
        BranchId,
        OfficeEmail,
        OfficeMobileNumber,
        EmployeeId,
        PersonalMobileNumber,
        PersonalEmail,
        DateOfBirth,
        DesignationId,
        DepartmentId,
        FatherName,
        MotherName,
        EmployementTypeId,
        Aadhar,
        PAN,
        ReligionId,
        BloodGroupId,
        EmergencyContact,
        UAN,
        ESI,
        DateOfJoining,
        CheckInTime,
        CheckOutTime,
        DateOfExit,
        AccountName,
        PresentAddressLine1,
        PresentAddressLine2,
        PresentAddressCity,
        PresentAddressPincode,
        PresentAddressStateId,
        PresentAddressCountryId,
        IsPermannentSameAsPresent,
        PermanentAddressLine1,
        PermanentAddressLine2,
        PermanentAddressCity,
        PermanentAddressPincode,
        PermanentAddressStateId,
        PermanentAddressCountryId,
        BankAccountNumber,
        BankAccountName,
        BankId,
        BankIfscCode,
        BankAccountTypeId,
        BankBrachName
    } = employeeData;

    const [result] = await db.query(
        `INSERT INTO Employee (  
        Title,
        EmployeeName,
        EmployeeStatusId,
        ReportingTo,
        GenderId,
        MaritalStatusId,
        BranchId,
        OfficeEmail,
        OfficeMobileNumber,
        EmployeeId,
        PersonalMobileNumber,
        PersonalEmail,
        DateOfBirth,
        DesignationId,
        DepartmentId,
        FatherName,
        MotherName,
        EmployementTypeId,
        Aadhar,
        PAN,
        ReligionId,
        BloodGroupId,
        EmergencyContact,
        UAN,
        ESI,
        DateOfJoining,
        CheckInTime,
        CheckOutTime,
        DateOfExit,
        AccountName,
        PresentAddressLine1,
        PresentAddressLine2,
        PresentAddressCity,
        PresentAddressPincode,
        PresentAddressStateId,
        PresentAddressCountryId,
        IsPermannentSameAsPresent,
        PermanentAddressLine1,
        PermanentAddressLine2,
        PermanentAddressCity,
        PermanentAddressPincode,
        PermanentAddressStateId,
        PermanentAddressCountryId,
        BankAccountNumber,
        BankAccountName,
        BankId,
        BankIfscCode,
        BankAccountTypeId,
        BankBrachName) 
     VALUES (?, ?, ?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)`,
        [
            Title,
            EmployeeName,
            EmployeeStatusId,
            ReportingTo,
            GenderId,
            MaritalStatusId,
            BranchId,
            OfficeEmail,
            OfficeMobileNumber,
            EmployeeId,
            PersonalMobileNumber,
            PersonalEmail,
            DateOfBirth,
            DesignationId,
            DepartmentId,
            FatherName,
            MotherName,
            EmployementTypeId,
            Aadhar,
            PAN,
            ReligionId,
            BloodGroupId,
            EmergencyContact,
            UAN,
            ESI,
            DateOfJoining,
            CheckInTime,
            CheckOutTime,
            DateOfExit,
            AccountName,
            PresentAddressLine1,
            PresentAddressLine2,
            PresentAddressCity,
            PresentAddressPincode,
            PresentAddressStateId,
            PresentAddressCountryId,
            IsPermannentSameAsPresent,
            PermanentAddressLine1,
            PermanentAddressLine2,
            PermanentAddressCity,
            PermanentAddressPincode,
            PermanentAddressStateId,
            PermanentAddressCountryId,
            BankAccountNumber,
            BankAccountName,
            BankId,
            BankIfscCode,
            BankAccountTypeId,
            BankBrachName,
        ]
    );

    return result.insertId;
};

exports.getAllEmployees = async () => {
    const [results] = await db.query(`
        SELECT E.* ,R.EmployeeName ReportingToMgr FROM Employee E
        LEFT JOIN Employee R ON E.ReportingTo=R.Id`);
    return results;
};

exports.getEmployeeById = async (id) => {
    const [result] = await db.query("SELECT * FROM Employee WHERE Id = ?", [id]);
    return result.length > 0 ? result[0] : null;
};

exports.updateEmployee = async (id, employeeData) => {
    const {
        Title,
        EmployeeName,
        EmployeeStatusId,
        ReportingTo,
        GenderId,
        MaritalStatusId,
        BranchId,
        OfficeEmail,
        OfficeMobileNumber,
        EmployeeId,
        PersonalMobileNumber,
        PersonalEmail,
        DateOfBirth,
        DesignationId,
        DepartmentId,
        FatherName,
        MotherName,
        EmployementTypeId,
        Aadhar,
        PAN,
        ReligionId,
        BloodGroupId,
        EmergencyContact,
        UAN,
        ESI,
        DateOfJoining,
        CheckInTime,
        CheckOutTime,
        DateOfExit,
        AccountName,
        PresentAddressLine1,
        PresentAddressLine2,
        PresentAddressCity,
        PresentAddressPincode,
        PresentAddressStateId,
        PresentAddressCountryId,
        IsPermannentSameAsPresent,
        PermanentAddressLine1,
        PermanentAddressLine2,
        PermanentAddressCity,
        PermanentAddressPincode,
        PermanentAddressStateId,
        PermanentAddressCountryId,
        BankAccountNumber,
        BankAccountName,
        BankId,
        BankIfscCode,
        BankAccountTypeId,
        BankBrachName,
    } = employeeData;

    await db.query(
        `UPDATE Employee SET 
        Title=?,
        EmployeeName=?,
        EmployeeStatusId=?,
        ReportingTo=?,
        GenderId=?,
        MaritalStatusId=?,
        BranchId=?,
        OfficeEmail=?,
        OfficeMobileNumber=?,
        EmployeeId=?,
        PersonalMobileNumber=?,
        PersonalEmail=?,
        DateOfBirth=?,
        DesignationId=?,
        DepartmentId=?,
        FatherName=?,
        MotherName=?,
        EmployementTypeId=?,
        Aadhar=?,
        PAN=?,
        ReligionId=?,
        BloodGroupId=?,
        EmergencyContact=?,
        UAN=?,
        ESI=?,
        DateOfJoining=?,
        CheckInTime=?,
        CheckOutTime=?,
        DateOfExit=?,
        AccountName=?,
        PresentAddressLine1=?,
        PresentAddressLine2=?,
        PresentAddressCity=?,
        PresentAddressPincode=?,
        PresentAddressStateId=?,
        PresentAddressCountryId=?,
        IsPermannentSameAsPresent=?,
        PermanentAddressLine1=?,
        PermanentAddressLine2=?,
        PermanentAddressCity=?,
        PermanentAddressPincode=?,
        PermanentAddressStateId=?,
        PermanentAddressCountryId=?,
        BankAccountNumber=?,
        BankAccountName=?,
        BankId=?,
        BankIfscCode=?,
        BankAccountTypeId=?,
        BankBrachName=?
     WHERE Id = ?`,
        [
            Title,
            EmployeeName,
            EmployeeStatusId,
            ReportingTo,
            GenderId,
            MaritalStatusId,
            BranchId,
            OfficeEmail,
            OfficeMobileNumber,
            EmployeeId,
            PersonalMobileNumber,
            PersonalEmail,
            DateOfBirth,
            DesignationId,
            DepartmentId,
            FatherName,
            MotherName,
            EmployementTypeId,
            Aadhar,
            PAN,
            ReligionId,
            BloodGroupId,
            EmergencyContact,
            UAN,
            ESI,
            DateOfJoining,
            CheckInTime,
            CheckOutTime,
            DateOfExit,
            AccountName,
            PresentAddressLine1,
            PresentAddressLine2,
            PresentAddressCity,
            PresentAddressPincode,
            PresentAddressStateId,
            PresentAddressCountryId,
            IsPermannentSameAsPresent,
            PermanentAddressLine1,
            PermanentAddressLine2,
            PermanentAddressCity,
            PermanentAddressPincode,
            PermanentAddressStateId,
            PermanentAddressCountryId,
            BankAccountNumber,
            BankAccountName,
            BankId,
            BankIfscCode,
            BankAccountTypeId,
            BankBrachName,
            id
        ]
    );
};

exports.deleteEmployee = async (id) => {
    await db.query("DELETE FROM Employee WHERE Id = ?", [id]);
};
